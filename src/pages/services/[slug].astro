---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import { Icon } from "astro-icon/components";
import LEDOutdoor from "assets/LED - Outdoor.jpg";
import Salon from "assets/Salon.jpg";
import Event from "assets/Event.jpg";
import Hoarding from "assets/Hoarding & Branding.jpg";
import Production from "assets/Production (1).jpg";
import Project from "assets/OGF_NOLIMIT.png";
import { Picture, getImage } from "astro:assets";

// Generate a new path for every collection entry
export async function getStaticPaths() {
  const servicesEntries = await getCollection("services");
  return servicesEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
const optimizedBackground = await getImage({ src: LEDOutdoor, format: "webp" });
const optimizedBackground1 = await getImage({ src: Salon, format: "webp" });
const optimizedBackground2 = await getImage({ src: Event, format: "webp" });
const optimizedBackground3 = await getImage({ src: Hoarding, format: "webp" });
const optimizedBackground4 = await getImage({
  src: Production,
  format: "webp",
});
const optimizedBackground5 = await getImage({ src: Project, format: "webp" });
const features = [
  {
    title: "Outdoor LED Advertising",
    link: "/services/outdoor-led-advertising",
    description:
      "Build your site using React, Svelte, Vue, Preact, web components, or just plain ol' HTML + JavaScript.",
    icon: "bx:bxs-briefcase",
    image: optimizedBackground.src!,
    locations: [
      "LIBERTY BUILDING COLOMBO 3",
      "TOWN HALL COLOMBO 7",
      "DUTCH HOSPITAL COLOMBO 1",
      "THILAKMA RAJAGIRIYA",
      "RAJAGIRIYA LED SCREEN",
      "IOC SEEDUWA",
      "IOC MOUNT LAVINIA",
      "IOC DEMATAGODA",
      "Diyatha",
      "Havelock",
      "Borella",
    ],
  },
  {
    title: "Indoor LED Advertising",
    link: "/services/indoor-led-advertising",
    description:
      "Astro renders your entire page to static HTML, removing all JavaScript from your final build by default.",
    icon: "bx:bxs-window-alt",
    image: optimizedBackground1.src!,
    locations: [
      "LIBERTY BUILDING COLOMBO 3",
      "TOWN HALL COLOMBO 7",
      "DUTCH HOSPITAL COLOMBO 1",
      "THILAKMA RAJAGIRIYA",
      "RAJAGIRIYA LED SCREEN",
    ],
  },
  {
    title: "Events",
    link: "/services/events",
    description:
      "Automatic sitemaps, RSS feeds, pagination and collections take the pain out of SEO and syndication. It just works!",
    icon: "bx:bxs-file-find",
    image: optimizedBackground2.src!,
    locations: [
      "LIBERTY BUILDING COLOMBO 3",
      "TOWN HALL COLOMBO 7",
      "DUTCH HOSPITAL COLOMBO 1",
      "THILAKMA RAJAGIRIYA",
      "RAJAGIRIYA LED SCREEN",
    ],
  },
  {
    title: "Hoardings and Branding",
    link: "/services/hoardings-and-branding",
    description:
      "Astro supports TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and any other npm packages.",
    icon: "bx:bxs-bot",
    image: optimizedBackground3.src!,
    locations: ["LIBERTY BUILDING COLOMBO 3", "Diyatha", "Havelock", "Borella"],
  },

  {
    title: "Productions",
    link: "/services/productions",
    description:
      "Astro is an open source project powered by hundreds of contributors making thousands of individual contributions.",
    icon: "bx:bxs-user",
    image: optimizedBackground4.src!,
    locations: ["LIBERTY BUILDING COLOMBO 3", "TOWN HALL COLOMBO 7", "Borella"],
  },
  {
    title: "Projects",
    link: "/services/projects",
    description:
      "Astro is an open source project powered by hundreds of contributors making thousands of individual contributions.",
    icon: "bx:bxs-user",
    image: optimizedBackground5.src!,
    locations: [
      "LIBERTY BUILDING COLOMBO 3",
      "IOC DEMATAGODA",
      "Diyatha",
      "Havelock",
      "Borella",
    ],
  },
];

// Get the entry directly from the prop on render
const { entry } = Astro.props;
const { Content } = await entry.render();

const currentPath = Astro.url.pathname; // Get the current URL path
const matchedFeature = features.find((item) => item.link === currentPath);

const isHomePage = currentPath === "/";
---

<Layout title={entry.data.title}>
  <Container>
    <div class="mx-auto max-w-3xl mt-14">
      {
        isHomePage ? (
          // Display all features on the homepage
          features.map((feature) => (
            <div>
              <h2 class="text-2xl font-bold text-[#0A91D9] mb-4">
                {feature.title}
              </h2>
              <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-8">
                {feature.locations.map((location) => (
                  <div
                    class="flex flex-col bg-slate-50 p-4 rounded-md transition-transform duration-300 hover:scale-105">
                    <Picture
                      src={feature.image}
                      alt={feature.title}
                      sizes="(max-width: 800px) 100vw, 400px"
                      width={400}
                      height={400}
                      class="w-full rounded-md group-hover:shadow-xl bg-white object-cover object-center"
                      format="jpg"
                    />
                    <div class="flex gap-2 items-center justify-center my-2">
                      <div class="mt-1 bg-[#0A91D9] rounded-full p-2 w-8 h-8 shrink-0">
                        <Icon class="text-white" name={feature.icon} />
                      </div>
                      <h3 class="font-semibold text-lg text-[#0A91D9]">
                        {location}
                      </h3>
                    </div>
                    <p class="text-slate-500">{feature.description}</p>
                    <a
                      href={feature.link}
                      class="text-blue-500 hover:underline mt-2">
                      Learn More
                    </a>
                  </div>
                ))}
              </div>
            </div>
          ))
        ) : matchedFeature ? (
          // Display only the matched feature locations
          <div>
            <h2 class="text-2xl font-bold text-[#0A91D9] mb-4">
              {matchedFeature.title}
            </h2>
            <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-8">
              {matchedFeature.locations.map((location) => (
                <div
                  class="flex flex-col bg-slate-50 p-4 rounded-md transition-transform duration-300 hover:scale-105">
                  <Picture
                    src={matchedFeature.image}
                    alt={matchedFeature.title}
                    sizes="(max-width: 800px) 100vw, 400px"
                    width={400}
                    height={400}
                    class="w-full rounded-md group-hover:shadow-xl bg-white object-cover object-center"
                    format="jpg"
                  />
                  <div class="flex gap-2 items-center justify-center my-2">
                    <div class="mt-1 bg-[#0A91D9] rounded-full p-2 w-8 h-8 shrink-0">
                      <Icon class="text-white" name={matchedFeature.icon} />
                    </div>
                    <h3 class="font-semibold text-lg text-[#0A91D9]">
                      {location}
                    </h3>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          // If no match found, display nothing or a message
          <p class="text-center text-gray-500">
            No locations available for this service.
          </p>
        )
      }
    </div>
  </Container>
</Layout>
